"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadEnvConfig = exports.processEnv = void 0;
var fs = __importStar(require("fs"));
var path = __importStar(require("path"));
var dotenv = __importStar(require("dotenv"));
var dotenv_expand_1 = __importDefault(require("dotenv-expand"));
var combinedEnv = undefined;
var cachedLoadedEnvFiles = [];
function processEnv(loadedEnvFiles, dir, log) {
    var _a;
    if (log === void 0) { log = console; }
    // don't reload env if we already have since this breaks escaped
    // environment values e.g. \$ENV_FILE_KEY
    if (process.env.__PROCESSED_ENV || loadedEnvFiles.length === 0) {
        return process.env;
    }
    process.env.__PROCESSED_ENV = 'true';
    var origEnv = Object.assign({}, process.env);
    var parsed = {};
    for (var _i = 0, loadedEnvFiles_1 = loadedEnvFiles; _i < loadedEnvFiles_1.length; _i++) {
        var envFile = loadedEnvFiles_1[_i];
        try {
            var result = {};
            result.parsed = dotenv.parse(envFile.contents);
            result = dotenv_expand_1.default(result);
            if (result.parsed) {
                log.info("Loaded env from " + path.join(dir || '', envFile.path));
            }
            for (var _b = 0, _c = Object.keys(result.parsed || {}); _b < _c.length; _b++) {
                var key = _c[_b];
                if (typeof parsed[key] === 'undefined' && typeof origEnv[key] === 'undefined') {
                    parsed[key] = (_a = result.parsed) === null || _a === void 0 ? void 0 : _a[key];
                }
            }
        }
        catch (err) {
            log.error("Failed to load env from " + path.join(dir || '', envFile.path), err);
        }
    }
    return Object.assign(process.env, parsed);
}
exports.processEnv = processEnv;
function loadEnvConfig(dir, dev, log) {
    if (log === void 0) { log = console; }
    // don't reload env if we already have since this breaks escaped
    // environment values e.g. \$ENV_FILE_KEY
    if (combinedEnv) {
        return {
            combinedEnv: combinedEnv,
            loadedEnvFiles: cachedLoadedEnvFiles,
        };
    }
    var isTest = process.env.NODE_ENV === 'test';
    var mode = isTest ? 'test' : dev ? 'development' : 'production';
    var dotenvFiles = [
        ".env." + mode + ".local",
        // Don't include `.env.local` for `test` environment
        // since normally you expect tests to produce the same
        // results for everyone
        mode !== 'test' && '.env.local',
        ".env." + mode,
        '.env',
    ];
    for (var _i = 0, dotenvFiles_1 = dotenvFiles; _i < dotenvFiles_1.length; _i++) {
        var envFile = dotenvFiles_1[_i];
        // only load .env if the user provided has an env config file
        var dotEnvPath = path.join(dir, envFile);
        try {
            var stats = fs.statSync(dotEnvPath);
            // make sure to only attempt to read files
            if (!stats.isFile()) {
                continue;
            }
            var contents = fs.readFileSync(dotEnvPath, 'utf8');
            cachedLoadedEnvFiles.push({ path: envFile, contents: contents });
        }
        catch (err) {
            if (err.code !== 'ENOENT') {
                log.error("Failed to load env from " + envFile, err);
            }
        }
    }
    combinedEnv = processEnv(cachedLoadedEnvFiles, dir);
    return {
        combinedEnv: combinedEnv,
        loadedEnvFiles: cachedLoadedEnvFiles,
    };
}
exports.loadEnvConfig = loadEnvConfig;
